# Protobuf Python runtime
#
# See also code generation logic under /src/google/protobuf/compiler/python.
#
# Most users should depend upon public aliases in the root:
#   //:protobuf_python
#   //:well_known_types_py_pb2

load("@rules_pkg//:mappings.bzl", "pkg_files", "strip_prefix")
load("@rules_python//python:defs.bzl", "py_library")
load("//:protobuf.bzl", "internal_py_proto_library")
load("//build_defs:arch_tests.bzl", "aarch64_test", "x86_64_test")
load("//build_defs:cpp_opts.bzl", "COPTS")
load("//conformance:defs.bzl", "conformance_test")
load(":internal.bzl", "internal_copy_files")

py_library(
    name = "protobuf_python",
    data = select({
        "//conditions:default": [],
        ":use_fast_cpp_protos": [
            ":google/protobuf/pyext/_message.so",
            "//python/google/protobuf/internal:_api_implementation.so",
        ],
    }),
    visibility = ["//:__pkg__"],
    deps = [
        ":python_srcs",
        ":well_known_types_py_pb2",
    ],
)

config_setting(
    name = "use_fast_cpp_protos",
    values = {
        "define": "use_fast_cpp_protos=true",
    },
)

internal_py_proto_library(
    name = "well_known_types_py_pb2",
    srcs = [":copied_wkt_proto_files"],
    include = ".",
    default_runtime = "",
    protoc = "//:protoc",
    srcs_version = "PY2AND3",
    visibility = [
        "//:__pkg__",
        "@upb//:__subpackages__",
    ],
)

internal_copy_files(
    name = "copied_wkt_proto_files",
    srcs = [
        "//:well_known_type_protos",
        "//src/google/protobuf:descriptor_proto_srcs",
        "//src/google/protobuf/compiler:plugin.proto",
    ],
    strip_prefix = "src",
)

config_setting(
    name = "allow_oversize_protos",
    values = {
        "define": "allow_oversize_protos=true",
    },
)

cc_binary(
    name = "google/protobuf/pyext/_message.so",
    srcs = glob([
        "google/protobuf/pyext/*.cc",
        "google/protobuf/pyext/*.h",
    ]),
    copts = COPTS + [
        "-DGOOGLE_PROTOBUF_HAS_ONEOF=1",
    ] + select({
        "//conditions:default": [],
        ":allow_oversize_protos": ["-DPROTOBUF_PYTHON_ALLOW_OVERSIZE_PROTOS=1"],
    }),
    includes = ["."],
    linkshared = 1,
    linkstatic = 1,
    tags = [
        # Exclude this target from wildcard expansion (//...) because it may
        # not even be buildable. It will be built if it is needed according
        # to :use_fast_cpp_protos.
        # https://docs.bazel.build/versions/master/be/common-definitions.html#common-attributes
        "manual",
    ],
    deps = [
        ":proto_api",
        "//:protobuf",
        "//src/google/protobuf:descriptor_legacy",
    ] + select({
        "//conditions:default": [],
        ":use_fast_cpp_protos": ["//external:python_headers"],
    }),
)

aarch64_test(
    name = "aarch64_test",
    bazel_binaries = [
        "//python/google/protobuf/internal:_api_implementation.so",
        "google/protobuf/pyext/_message.so",
    ],
)

x86_64_test(
    name = "x86_64_test",
    bazel_binaries = [
        "//python/google/protobuf/internal:_api_implementation.so",
        "google/protobuf/pyext/_message.so",
    ],
)

py_library(
    name = "python_srcs",
    srcs = glob(["google/protobuf/**/*.py"]) + [
        "//python/google/protobuf/internal:python_internal_srcs",
    ],
    imports = ["python"],
    srcs_version = "PY2AND3",
    visibility = [
        "//:__pkg__",
        "@upb//:__subpackages__",
    ],
)

################################################################################
# Tests
################################################################################

cc_library(
    name = "proto_api",
    hdrs = ["google/protobuf/proto_api.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//external:python_headers",
    ],
)

conformance_test(
    name = "conformance_test",
    env = {"PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION": "python"},
    failure_list = "//conformance:failure_list_python.txt",
    target_compatible_with = select({
        "@system_python//:none": ["@platforms//:incompatible"],
        ":use_fast_cpp_protos": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    testee = "//conformance:conformance_python",
    text_format_failure_list = "//conformance:text_format_failure_list_python.txt",
)

# Note: this requires --define=use_fast_cpp_protos=true
conformance_test(
    name = "conformance_test_cpp",
    env = {"PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION": "cpp"},
    failure_list = "//conformance:failure_list_python.txt",
    target_compatible_with = select({
        "@system_python//:none": ["@platforms//:incompatible"],
        ":use_fast_cpp_protos": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    testee = "//conformance:conformance_python",
    text_format_failure_list = "//conformance:text_format_failure_list_python_cpp.txt",
)

################################################################################
# Distribution files
################################################################################

pkg_files(
    name = "python_source_files",
    srcs = glob(
        [
            "google/protobuf/**/*.py",
        ],
    ) + [
        "README.md",
        "google/__init__.py",
        "setup.cfg",
        "tox.ini",
        "//python/google/protobuf/internal:python_internal_source_files",
    ],
    strip_prefix = strip_prefix.from_root(""),
    visibility = ["@upb//:__subpackages__"],
)
